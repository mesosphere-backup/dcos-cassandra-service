buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.6'
    }
}


plugins {
    id 'nebula.provided-base' version '3.0.3'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
}
apply from: "$rootDir/gradle/universe.gradle"

ext {
    cliVersion = "0.1.0"
    serviceVersion = "2.5.0"
    mavenRep = {
        url "$buildDir/repo"
    }
    isSnapshot = project.properties['Release'] ? false : true
}

def cassVer = System.properties['cassVer'] ?: "3.0.8"

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'com.github.ksoichiro.console.reporter'
    apply from: "$rootDir/gradle/spock.gradle"

    group = 'com.mesosphere.dcos'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

configure(subprojects - project('seedprovider')) {

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
          url "http://downloads.mesosphere.com/maven/"
        }
        maven {
          url "http://downloads.mesosphere.com/maven-snapshot/"
        }
    }

    ext {
        dropwizardVer = '0.9.2'
        guiceVer = '4.0'
        mesosVer = '1.0.2'
        junitVer = '4.12'
        guavaVer = '19.0'
        slf4jVer = '1.7.14'
        curatorVer = '2.9.1'
        dropwizardVer = '0.9.2'
        logbackVer = '1.1.3'
    }

    dependencies {
        compile "org.apache.mesos:mesos:${mesosVer}"
        compile "org.slf4j:slf4j-api:${slf4jVer}"
        compile "org.apache.curator:curator-framework:${curatorVer}"
        compile "io.dropwizard:dropwizard-core:${dropwizardVer}"
        compile "io.dropwizard.modules:dropwizard-java8:0.9.0-1"
        compile "io.dropwizard:dropwizard-client:${dropwizardVer}"
        compile "com.google.inject:guice:${guiceVer}"
        compile "com.google.guava:guava:${guavaVer}"
        compile "ch.qos.logback:logback-classic:${logbackVer}"
        compile "ch.qos.logback:logback-core:${logbackVer}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1"
        compile "junit:junit:${junitVer}"
        testCompile "org.apache.curator:curator-test:${curatorVer}"
        testCompile "io.dropwizard:dropwizard-testing:${dropwizardVer}"
    }

    // Print results on the fly
    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    // Include unit test report in 'check'
    // (jacoco itself depends on 'test')
    check.dependsOn jacocoTestReport
    jacocoTestReport {
        reports {
            html.destination "${buildDir}/jacoco"
        }
    }

    task copyTestResources(type: Copy) {
        from sourceSets.test.resources
        into sourceSets.test.output.classesDir
    }
    processTestResources.dependsOn copyTestResources
}

configure(subprojects - project('mds-snitch')) {

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
          url "http://downloads.mesosphere.com/maven/"
        }
        maven {
          url "http://downloads.mesosphere.com/maven-snapshot/"
        }
    }

    ext {
        dropwizardVer = '0.9.2'
        guiceVer = '4.0'
        mesosVer = '1.0.2'
        junitVer = '4.12'
        guavaVer = '19.0'
        slf4jVer = '1.7.14'
        curatorVer = '2.9.1'
        dropwizardVer = '0.9.2'
        logbackVer = '1.1.3'
    }

    dependencies {
        compile "org.apache.mesos:mesos:${mesosVer}"
        compile "org.slf4j:slf4j-api:${slf4jVer}"
        compile "org.apache.curator:curator-framework:${curatorVer}"
        compile "io.dropwizard:dropwizard-core:${dropwizardVer}"
        compile "io.dropwizard.modules:dropwizard-java8:0.9.0-1"
        compile "io.dropwizard:dropwizard-client:${dropwizardVer}"
        compile "com.google.inject:guice:${guiceVer}"
        compile "com.google.guava:guava:${guavaVer}"
        compile "ch.qos.logback:logback-classic:${logbackVer}"
        compile "ch.qos.logback:logback-core:${logbackVer}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1"
        compile "junit:junit:${junitVer}"
        testCompile "org.apache.curator:curator-test:${curatorVer}"
        testCompile "io.dropwizard:dropwizard-testing:${dropwizardVer}"
    }

    // Print results on the fly
    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    // Include unit test report in 'check'
    // (jacoco itself depends on 'test')
    check.dependsOn jacocoTestReport
    jacocoTestReport {
        reports {
            html.destination "${buildDir}/jacoco"
        }
    }
    
}

configure(project(':seedprovider')) {

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile "org.apache.cassandra:cassandra-all:${cassVer}"

    }
}

configure(project(':mds-snitch')) {

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile "org.apache.cassandra:cassandra-all:${cassVer}"

    }
}

task cliVersion << {
    print cliVersion
}

if (project.hasProperty('RepositoryUrl' + (isSnapshot ? 'Snapshot' : 'Release'))) {
    if (project.hasProperty('RepositoryUsername') &&
        project.hasProperty('RepositoryPassword')) {
        mavenRep = {
            url isSnapshot ? RepositoryUrlSnapshot : RepositoryUrlRelease
            credentials {
                username RepositoryUsername
                password RepositoryPassword
            }
        }
    } else {
        mavenRep = {
            url RepositoryUrl
        }
    }
}
